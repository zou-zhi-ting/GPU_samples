// CUDA runtime 库 + CUBLAS 库   
#include "cuda_runtime.h"  
#include "cublas_v2.h"  
#include "book.h"
#include <stdio.h>  
#include <device_launch_parameters.h>
#include <cpu_bitmap.h>

#define DIM 1000
using namespace std;
struct cuComplex {
	float r;
	float i;
	cuComplex(float a,float b):r(a),i(b){}
	__device__ float magnitude2(void) {
		return r*r + i*i;
	}
	__device__ cuComplex operator*(const cuComplex &a) {
		return cuComplex(r*a.r - i*a.i, i*a.r + r*a.i);
	}
	__device__ cuComplex operator+(const cuComplex &a) {
		return cuComplex(r + a.r, i + a.i);
	}
};

__device__ int julia(int x, int y) {
	const float scale = 1.5;
	float jx = scale*(float)(DIM / 2 - x) / (DIM / 2);
	float jy = scale*(float)(DIM / 2 - y) / (DIM / 2);

	cuComplex c(-0.8, 0.156);
	cuComplex a(jx, jy);

	int i = 0;
	for (i = 0; i < 200; i++)
	{
		a = a*a + c;
		if (a.magnitude2() > 1000)
			return 0;
	}
	return 1;
}

__global__ void kernel(unsigned char *ptr)
{
	int x = blockIdx.x;
	int y = blockIdx.y;
	int offset = x + y*gridDim.x;

	int juliavalue = julia(x, y);
	ptr[offset * 4 + 0] = 255 * juliavalue;
	ptr[offset * 4 + 1] = 0;
	ptr[offset * 4 + 2] = 0;
	ptr[offset * 4 + 3] = 255;
}
int main()
{
	CPUBitmap bitmap(DIM, DIM);
	unsigned char *dev_bitmap;

	HANDLE_ERROR(cudaMalloc((void**)&dev_bitmap, bitmap.image_size()));

	dim3 grid(DIM, DIM);        //二维线程格，线程格每一维大小与图像每一维大小是相等的，
                              //因此在（0，0）到（DIM-1，DIM-1）之间每个像素点（x，y）都能获得一个线程块
	kernel <<<grid, 1 >>> (dev_bitmap);
	HANDLE_ERROR(cudaMemcpy(bitmap.get_ptr(), dev_bitmap, bitmap.image_size(), cudaMemcpyDeviceToHost));

	bitmap.display_and_exit();
	cudaFree(dev_bitmap);

	//system("pause");
	return 0;
}
